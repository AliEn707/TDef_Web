
var jsReady = false;
var connector = false; //boolean connector ready

var hideConnector; //function in future

var latency;

function isReady() {
  return jsReady;
}

//get connector object to call functions
var getConnector=function () {
	movieName="connector";
	if (navigator.appName.indexOf("Microsoft") != -1) {
		return window[movieName];
	} else {
		return document[movieName];
	}
}

///public network functions

//connect to public
//publicConnect("localhost","7001")
function publicConnect(host, port) {
	Loading.show("#public_connecting");
	//console.log(access().token)
	getConnector().publicConnect(host, port, access().name, access().token);
}

//
function publicConnectionError(value) {
	Loading.message="#public_connect_fail";
	console.log(value);
}
//callback on success autorisation
function publicConnected(s){
	console.log("connected: "+s);
	var obj=eval(s);
	obj.diff=obj.time-((Date.now()/1000) | 0);//server-local
	console.log("differ server/local time "+obj.diff+" sec");
	Loading.message="";
	getEngine().public.show();
	getEngine().public.switchTo('events');
	Loading.hide();
}
//callback on public autentification fail
function publicAuthFail(){
	console.log("public auth fail");
	Loading.message="#public_auth_fail";
	//TODO: add some actions
}

function publicSend(str) {
	getConnector().publicSend(str);
}

//get room 
function publicGetRoom(e) {
	publicSend("byte,76,byte,99,int,"+e.id);
}

//room start {msg:1,objtype:"Player",id:368322860,room:{$:0,type:1,id:616333680},$:0,time:24688}
//event {msg:2,objtype:"Event",id:1,map:"pvz11_11",name:"#event",time:25444}
function proceedPublicMessages(){
	if (!connector)
		return;
	var str=getConnector().publicGetData();
	if (!str)
		return;
	var arr=eval(str);
	var engine=getEngine();
	for (var i in arr){
		arr[i].time=current_time;
		switch (arr[i].objtype){
			case 'Event': //we got event message
				if (arr[i].action=='change') //add event
					engine.public.eventsAdd(arr[i]);
				else
					engine.public.eventsRemove(arr[i]); //remove event
				break;
			case 'Player':
				console.log(arr[i])
				break;
			case 'Room':
				if (arr[i].action=='ready'){
						mapConnect(arr[i].host,arr[i].port);
						engine.setMap(engine.public.events.all[arr[i].event_id].event.map);
						engine.loadMap();
					}
				break;
		}
	}
}

///map network funtions

var MSG_SPAWN_TOWER=1;
var MSG_SPAWN_NPC=2;
var MSG_DROP_TOWER=3;
var MSG_MOVE_HERO=4;
var MSG_SET_TARGET=5;
//send to mapserver; 
//str is string of pairs of params type,data,...
//types: byte char short int uint float string
//note: string only send string of bytes
function mapSend(str) {
	getConnector().mapSend(str);
	//for spawn npc must be "byte,"+MSG_SPAWN_NPC+",int,"+num
}

//spawn Npc
function mapSpawnNpc(num){
	mapSend("byte,"+MSG_SPAWN_NPC+",int,"+num);
}

//spawn Tower
function mapSpawnTower(num, node){
	mapSend("byte,"+MSG_SPAWN_TOWER+",int,"+node+",short,"+num);
}

//move Hero
function mapMoveHero(node){
	mapSend("byte,"+MSG_MOVE_HERO+",int,"+node);
}

//connect to mapserver
function mapConnect(host,port) {
	Loading.show("#mapserver_connecting");
	getEngine().public.hide();
	getConnector().mapConnect(host,port);
	//TODO: add animation on screen
}

//connect to mapserver
function mapClose(host,port) {
	getConnector().mapClose();
}

//callback if cant connect
function mapConnectionError(val){
	console.log("can't connect: "+val);
	//TODO add handler
	//TODO: add message
	mapClose();
}

//callback on connection established
function mapConnected(){
	console.log("connected");
	//TODO: break animation of connection
	Loading.hide();
	Loading.message="";
}

//callback on map connection close
function mapClosed(){
	console.log("closed");
	Loading.show(""); 
	getEngine().map.clean();
	//player ingame set when mapserver ask info about player
	setTimeout(function(){
		if (true/* player not in mapserver*/) //uncomment after adding normal checking player status ingame/ not ingame
			Loading.hide();
	}, 1000); 
	getEngine().public.show(); 
}


//callback on map auth
function mapAuthData(value) {
//	console.log(value);
	sendToJavaScript(value)
	var obj=eval(value)
	latency=obj.latency*6/100;
	if (latency==0)
		latency=2;
	var engine=getEngine();
	engine.map.players.total=obj.players;
	engine.map.players.id=obj.id;
	console.log("player id"+obj.id)
}

//callback on got objects data
function proceedMapMessages(){
	if (!connector)
		return;
	var str=getConnector().mapGetData();
	if (!str)
		return;
//	console.log(str);
	var arr=eval(str);
//	delete str;
	var e=getEngine();
//	try{
		
	for(var i in arr){
		var obj=arr[i];
		obj.time=current_time;
		if (obj.objtype){
			if (obj.objtype=="Player"){
				//player
				if (!e.map.players[obj.id])
					e.map.players[obj.id]=new MapPlayer(obj);
				if (e.map.players[obj.id])
					e.map.players[obj.id].update(obj);
			}else{
				if (!e.map.objects[obj.id] && obj.create){
					e.map.objects[obj.id]=eval("new "+obj.objtype+"(obj)");
					e.stage.addChild(e.map.objects[obj.id]);
				}
				if (e.map.objects[obj.id]){
					e.map.objects[obj.id].update(obj);
				}
			}
		}else{
			console.log(obj)
		}
		//console.log(str)
	}
	
//	}catch(e){console.log(e)}
}

//callback on connector initialising
function connectorReady(){
	connector=true;
	console.log("Connector ready");
	hideConnector(getConnector());
	Loading.message="";
	if (afterConnectorReady)
		afterConnectorReady();
}

///functions for adding connectors
function addConnector(place){
	var connectors=["Flash"]; //TODO: in future must be ["Java", "SilverLight" ,"Flash"]
	for (var i in connectors)
		if (PluginDetect.isMinVersion(connectors[i]) > -1){
			var obj=window["addConnector"+connectors[i]](place,
				function (obj){
					obj.style.zIndex=0;
					obj.style.position="absolute";
					obj.style.left="0px";//-width
					obj.style.top="0px";
					//	obj.setAttribute("hidden","");
				},
				function () {
					Loading.message="#check_"+connectors[i].toLowerCase();
				}
			);
			getConnector=function (){return obj;}
			return;
		}
	
	Loading.message="#connector_not_available";
} 


//adding Flash connector to page
function addConnectorFlash(place, setStyle, callback){
	var path='<%= asset_url("connector.swf") %>';
	//some IE hack
	function createIeObject(url){
		var div = document.createElement("div");
		div.innerHTML = "<object classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'><param name='movie' value='" +url + "'></object>";
		return div.firstChild;
	}
	var isMSIE = /*@cc_on!@*/false;
	var obj = (isMSIE) ? createIeObject(path) : document.createElement("object");
	if (!isMSIE) {
		obj.setAttribute("type", "application/x-shockwave-flash");
		obj.setAttribute("data", path);
	}
	//Add attributes to <object>
	obj.setAttribute("id", "connector");
	obj.setAttribute("width", "550");
	obj.setAttribute("height", "400");
	param = document.createElement('param')
	param.setAttribute('name', 'allowScriptAccess')
	param.setAttribute('value', 'sameDomain')
	obj.appendChild(param)
	if (setStyle)
		setStyle(obj);
	
	place=place || document.body
	place.appendChild(obj)

	if (callback){
		var timeout=window.setTimeout(
			callback,
			2000
		);
	
		hideConnector=function (o){
			window.clearTimeout(timeout);
			o.width=3;
			o.height=2;
			//o.parentNode.style.left=-o.width+"px";
		};
	}
	return obj;
}

function addConnectorJava(place, setStyle, callback) {
	var path='<%= asset_url("connector.jar").split("/connector")[0] %>';
	var file='connector.jar';
	//some IE hack
	function createIeObject(path, file){
		var div = document.createElement("div");
		div.innerHTML = "<object classid='clsid:8AD9C840-044E-11D1-B3E9-00805F499D93'>"+
			  "<PARAM name='code' value='Connector.class' >"+
			  "<PARAM name='codebase' value='"+path+"' >"+
			  "<PARAM name='archive' value='"+file+"' >"+
//			  "<PARAM name='permissions' value='all-permissions' >"+
			  "</object>";
		return div.firstChild;
	}
	var isMSIE = /*@cc_on!@*/false;
	var obj = (isMSIE) ? createIeObject(path, file) : document.createElement("object");
	if (!isMSIE) {
		obj.setAttribute("type", "application/x-java-applet");
//		obj.setAttribute("data", path);
		param = document.createElement('param');
		param.setAttribute('name', 'code');
		param.setAttribute('value', 'Connector.class');
		obj.appendChild(param);
		param = document.createElement('param');
		param.setAttribute('name', 'codebase');
		param.setAttribute('value', path);
		obj.appendChild(param);
		param = document.createElement('param');
		param.setAttribute('name', 'archive');
		param.setAttribute('value', file);
		obj.appendChild(param);
//		param = document.createElement('param');
//		param.setAttribute('name', 'permissions');
//		param.setAttribute('value', "all-permissions");
//		obj.appendChild(param);
	}
	//Add attributes to <object>
	obj.setAttribute("id", "connector");
	obj.setAttribute("width", "550");
	obj.setAttribute("height", "400");
	param = document.createElement('param');
	param.setAttribute('name', 'scriptable');
	param.setAttribute('value', 'true');
	obj.appendChild(param);
	param = document.createElement('param');
	param.setAttribute('name', 'mayscript');
	param.setAttribute('value', 'true');
	obj.appendChild(param);
	
	if (setStyle)
		setStyle(obj);
//	obj.setAttribute("hidden","")

	place=place || document.body;
	place.appendChild(obj);
	
	if (callback){
		var timeout=window.setTimeout(
			callback,
			2000
		);

		hideConnector=function (o){
			window.clearTimeout(timeout);
			o.width=3;
			o.height=2;
			//o.parentNode.style.left=-o.width+"px";
		};
	}
	
	return obj;
}
